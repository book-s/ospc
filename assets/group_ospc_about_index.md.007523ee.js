import{_ as e,c as a,o as t,a as o}from"./app.a7d8838a.js";const P=JSON.parse('{"title":"开源、安全、私密、连接","description":"","frontmatter":{},"headers":[],"relativePath":"group/ospc/about/index.md"}'),s={name:"group/ospc/about/index.md"},i=o('<h1 id="开源、安全、私密、连接" tabindex="-1">开源、安全、私密、连接 <a class="header-anchor" href="#开源、安全、私密、连接" aria-hidden="true">#</a></h1><h1 id="数据存储单位" tabindex="-1">数据存储单位 <a class="header-anchor" href="#数据存储单位" aria-hidden="true">#</a></h1><ul><li>bit 1Byte = 8bits 1因为字节=8bit</li><li>Byte 1024Byte = 1KiB = 8192bits</li><li>KiB 1024Kib = 1MiB = 8388608bits</li><li>MiB 1024MiB = 1GiB = 8589934592bits</li></ul><h1 id="一致性算法-paxos" tabindex="-1">一致性算法 Paxos <a class="header-anchor" href="#一致性算法-paxos" aria-hidden="true">#</a></h1><p>一致性算法是用来保证分布式系统中多个节点之间的数据一致性的算法。在分布式系统中，由于节点之间的通信可能会出现延迟、丢失等问题，导致节点之间的数据不一致，因此需要采用一致性算法来解决这个问题。</p><p>常见的一致性算法包括：</p><p>Paxos算法：Paxos算法是一个经典的一致性算法，用于解决分布式系统中的一致性问题。Paxos算法包含两个阶段：准备阶段和接受阶段。在准备阶段中，提议者向接受者发送一个准备请求，接受者回复Promise，表示可以接受提案。如果提议者收到了大多数接受者的Promise回复，就可以继续发送提案，直到达成一致决策。</p><p>Raft算法：Raft算法是一种比Paxos算法更易理解的一致性算法。Raft算法将分布式系统中的节点划分为三类：领导者、跟随者和候选者。领导者负责处理客户端请求，并将结果复制到跟随者。如果领导者宕机，就会出现选举新领导者的过程，即候选者。</p><p>Zab算法：Zab算法是Apache ZooKeeper采用的一致性算法。Zab算法包含两个阶段：广播阶段和提交阶段。在广播阶段，领导者向所有节点广播提案，节点回复ack表示收到提案。在提交阶段，领导者将提案发送给所有节点，节点对提案进行投票，当大多数节点都投票通过时，提案就被提交。</p><p>这些一致性算法都采用了类似的思路，即通过多个节点之间的协作，达成一致的决策，保证数据的一致性。但是，这些算法的具体实现细节和性能表现略有不同，需要根据具体场景选择适合的算法。</p><p>Paxos算法的基本思想是通过多个节点之间的协作，达成一致的决策。在Paxos算法中，存在多个角色，包括：</p><p>提议者（Proposer）：向其他节点提出提案的节点。 接受者（Acceptor）：接受来自提议者的提案，并作出回复。 学习者（Learner）：学习已经被达成一致的决策。 Paxos算法包含两个阶段，分别是准备阶段和接受阶段。具体流程如下：</p><p>提议者向所有接受者发送一个准备请求（Prepare Request），请求中包含一个提案编号N。 接受者收到请求后，比较提案编号N与已经接受的提案编号N&#39;，如果N&gt;N&#39;，则回复Promise，并将已经接受的提案编号N&#39;和对应的提案值V&#39;发送给提议者；否则回复Reject。 如果提议者收到了大多数接受者的Promise回复，则进入接受阶段。 提议者向所有接受者发送一个提案（Accept Request），请求中包含提案编号N和提案值V。 接受者收到请求后，比较提案编号N与已经接受的提案编号N&#39;，如果N&gt;=N&#39;，则接受提案，并发送Accepted消息给所有节点；否则拒绝提案。 如果提议者收到了大多数接受者的Accepted消息，则提案被达成一致，并通知所有学习者。</p><p>需要注意的是，在Paxos算法中，为了防止出现网络分区导致的多数派无法达成的情况，需要保证大多数接受者的参与。具体来说，如果存在N个接受者，至少有(N+1)/2个接受者必须接受一个提案，才能使提案被达成一致。</p><p>总的来说，Paxos算法通过多个节点之间的协作，达成一致的决策，保证数据的一致性。Paxos算法虽然比较复杂，但在分布式系统中具有广泛的应用价值，被视为分布式一致性算法的经典之作。</p>',15),r=[i];function p(c,d,n,_,h,x){return t(),a("div",null,r)}const u=e(s,[["render",p]]);export{P as __pageData,u as default};
